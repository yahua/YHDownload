//
//  NDDownloadManage+ImageGroup.m
//  YCZZ
//
//  Created by wangshiwen on 15/9/7.
//  Copyright (c) 2015年 com.nd.hy. All rights reserved.
//

#import "DownLoadManager+ImageGroup.h"
#import "DownLoadManager+User.h"

@implementation DownLoadManager (ImageGroup)

- (void)getGroupImageWithCondition:(DownloadCondition *)condition
                            sucess:(void(^)(NSArray *loacPaths))sucess
                           failure:(void(^)())failure {
    
//    if ([PubFunction1_0 stringIsNullOrEmpty:condition.downloadKey]) {
//        return;
//    }
//    NSArray *groupImageLocalPath = [self getLocalGroupImageWithDownloadKey:[self getDownloadKeyWithUserId:condition.downloadKey]];
//    if (groupImageLocalPath) {
//        if (sucess) {
//            sucess(groupImageLocalPath);
//        }
//        self.sucessDocumentBlock = nil;
//        self.failureDocumentBlock = nil;
//        self.lastDownloadDocumentKey = nil;
//    }else {
//        if (sucess) {
//            self.sucessDocumentBlock = sucess;
//            self.failureDocumentBlock = failure;
//            self.lastDownloadDocumentKey = condition.downloadKey;
//        }
//        //马上进入下载，其它正在下载的任务进入等待状态
//        [self addDownloadGroupImageTask_ConditionWithUerId:condition];
//    }
}

- (void)addDownloadGroupImageTaskWithCondition:(DownloadCondition *)condition {
    
    if ([PubFunction1_0 stringIsNullOrEmpty:condition.downloadKey]) {
        return;
    }
    if (condition.urls.count == 0) {
        return;
    }
    condition.downloadKey = [self downloadKeyWithOriginKey:condition.downloadKey];
    
    //二分屏， 第一个为视频地址 其它为文档数组（image）
    NSMutableArray *imageUrls = [NSMutableArray arrayWithArray:condition.urls];
    condition.urls = condition.urls;
    [self addDownloadTaskWithCondition:condition];
    
    //添加GroupImageTask
    [imageUrls removeObjectAtIndex:0]; //删除视频地址
    condition.urls = imageUrls;
    for (NSInteger index=1; index<=imageUrls.count; index++){
        
        NSString *imageDownloadKey = [NSString stringWithFormat:@"%@-%td",condition.downloadKey,index];
        NSString *imageUrl = [imageUrls objectAtIndex:index-1];
        NSArray *imageUrlArray = [imageUrl componentsSeparatedByString:@"-"];
        NSString *script1 = condition.downloadKey; //父key
        NSString *script2 = nil;
        if (imageUrlArray.count == 2) {//对于二分屏
            imageUrl = [imageUrlArray objectAtIndex:0];
            script2 = [[NSString alloc]initWithFormat:@"%@-%td",[imageUrlArray objectAtIndex:1],imageUrls.count];
        }
        DownloadCondition *imageCondition = [[DownloadCondition alloc] initWithDownloadKey:imageDownloadKey urls:@[imageUrl] script1:script1 script2:script2 downloadType:DownLoadResourceImageType];
        
        [self addGroupMemberDownloadTaskWithCondition:imageCondition parentKey:condition.downloadKey];
    }
}


- (void)pauseDownloadGroupImageTaskWithKey:(NSString *)downKey {
    
    //先暂停子下载队列、 因为暂停父下载队列会启动等待队列，导致会有四个同时下载
    NSArray *groupImageList = [self getDownloadImageGroup:downKey];
    for (DownloadTaskInfo *imageInfo in groupImageList) {
        [self pauseGroupImageMemberDownloadTask:imageInfo];
    }
    
    [self pauseDownloadTaskWithKey:downKey];
}

- (void)resumeDownloadGroupImageTaskWithKey:(NSString *)downKey {
    
    [self resumeDownloadTaskWithKey:downKey];
    
    NSArray *groupImageList = [self getDownloadImageGroup:downKey];
    for (DownloadTaskInfo *imageInfo in groupImageList) {
        [self resumeGroupImageMemberDownloadTask:imageInfo];
    }
}

- (void)deleteGroupImageTaskWithKey:(NSString *)downKey {
    
    NSArray *groupImageList = [self getDownloadImageGroup:downKey];
    for (DownloadTaskInfo *imageInfo in groupImageList) {
        [imageInfo deleteResourceDownInfo];
    }
    [self.downloadingImageDic removeObjectForKey:downKey];
    [self.finishImageDic removeObjectForKey:downKey];
    
    [self deleteDownloadTaskWithKey:downKey];
}

- (NSArray *)groupImageLocalPathWithKey:(NSString *)key {
    
    key = [self downloadKeyWithOriginKey:key];
    NSArray *downloadingArray = [self.downloadingImageDic objectForKey:key];
    if (downloadingArray.count > 0) {
        return nil;
    }
    NSArray *finishImageArray = [self.finishImageDic objectForKey:key];
    NSMutableArray *finishLocalPathList = [NSMutableArray arrayWithCapacity:1];
    for(DownloadTaskInfo *tmp in finishImageArray) {
        if ([[[tmp.downloadKey componentsSeparatedByString:@"-"] objectAtIndex:0] isEqualToString:key]) {
            [finishLocalPathList addObject:[NSString stringWithFormat:@"%@-%@", tmp.localPath, tmp.script2]];
        }
    }
    return finishLocalPathList;
}

#pragma mark - Private

- (NSArray *)getDownloadImageGroup:(NSString *)downKey {
    
    NSMutableArray *downloadInfoArr = [NSMutableArray array];
    
    NSArray *downloadIngImageArray = [self.downloadingImageDic objectForKey:downKey];
    NSArray *finishImageArray = [self.finishImageDic objectForKey:downKey];
    [downloadInfoArr addObjectsFromArray:downloadIngImageArray];
    [downloadInfoArr addObjectsFromArray:finishImageArray];
    
    return downloadInfoArr;
}


- (void)pauseGroupImageMemberDownloadTask:(DownloadTaskInfo *)downTask {
    
    if (downTask.status !=Download_status_downloading && downTask.status !=Download_status_waiting) {
        return;
    }
    //暂停下载
    if (downTask.status == Download_status_downloading) {
        [downTask.downloadTask cancelByProducingResumeData:^(NSData * resumeData) {
            [downTask saveResumeData:resumeData];
        }];
    }
    downTask.status =Download_status_pause;
    //更新下载数据
    [downTask.downloadTaskInfoRecord saveToDB];
    
}

- (void)resumeGroupImageMemberDownloadTask:(DownloadTaskInfo *)downTask {

    if (downTask.status == Download_status_completed) {
        return;
    }
    DownloadTaskInfo *parentInfo = [self downloadTaskInfoWithKey:downTask.script1];
    if (parentInfo.resourceType == DownLoadResourceVideoDocumentType &&
        [parentInfo hasDownloadVideo]) {
        
        NSArray *imageArray = [self.downloadingImageDic objectForKey:parentInfo.downloadKey];
        if (imageArray.count > 0) {
            DownloadTaskInfo *imageInfo = [imageArray firstObject];
            if ([downTask.downloadKey isEqualToString:imageInfo.downloadKey] &&
                imageInfo.status != Download_status_downloading) {
                imageInfo.status = Download_status_downloading;
                [self createDownloadTaskWithTaskInfo:imageInfo];
            }else {
                downTask.status =Download_status_waiting;
            }
            //保存下载资源
            [downTask.downloadTaskInfoRecord saveToDB];
        }
    }
}

@end
