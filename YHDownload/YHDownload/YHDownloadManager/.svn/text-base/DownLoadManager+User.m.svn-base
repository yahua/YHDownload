//
//  DownLoadManager+User.m
//  Download
//
//  Created by 王时温 on 11/5/15.
//  Copyright © 2015 王时温. All rights reserved.
//

#import "DownLoadManager+User.h"
#import "DownloadManager+ImageGroup.h"
#import "DownloadManager+Exercise.h"

@implementation DownLoadManager (User)

- (void)addDownloadTaskWithCondition_User:(DownloadCondition *)condition {
    
    condition.downloadKey = [self downloadKeyWithOriginKey:condition.downloadKey];
    switch (condition.downloadType) {
        case DownLoadResourceVideoDocumentType:
            [self addDownloadGroupImageTaskWithCondition:condition];
            break;
        case DownLoadResourceDocumentType:
        case DownLoadResourceVideoType:
            [self addDownloadTaskWithCondition:condition];
            break;
        case DownLoadResourceExerciseType:
            [self addDownloadExerciseTaskWithCondition:condition];
            break;
        default:
            break;
    }
}

- (void)pauseDownloadTaskWithKey_User:(NSString *)downloadKey {
    
    NSString *myDownloadKey = [self downloadKeyWithOriginKey:downloadKey];
    DownloadTaskInfo *taskInfo = [self downloadTaskInfoWithKey:myDownloadKey];
    switch (taskInfo.resourceType) {
        case DownLoadResourceVideoDocumentType:
            [self pauseDownloadGroupImageTaskWithKey:myDownloadKey];
            break;
        case DownLoadResourceDocumentType:
        case DownLoadResourceVideoType:
            [self pauseDownloadTaskWithKey:myDownloadKey];
            break;
        case DownLoadResourceExerciseType:
            [self pauseDownloadExerciseTaskWithKey:myDownloadKey];
            break;
        default:
            break;
    }
}

- (void)resumeDownloadTaskWithKey_User:(NSString *)downloadKey {
    
    NSString *myDownloadKey = [self downloadKeyWithOriginKey:downloadKey];
    DownloadTaskInfo *taskInfo = [self downloadTaskInfoWithKey:myDownloadKey];
    switch (taskInfo.resourceType) {
        case DownLoadResourceVideoDocumentType:
            [self resumeDownloadGroupImageTaskWithKey:myDownloadKey];
            break;
        case DownLoadResourceDocumentType:
        case DownLoadResourceVideoType:
            [self resumeDownloadTaskWithKey:myDownloadKey];
            break;
        case DownLoadResourceExerciseType:
            [self resumeDownloadExerciseTaskWithKey:myDownloadKey];
            break;
        default:
            break;
    }
}

- (void)deleteDownloadTaskWithKey_User:(NSString *)downloadKey {
    
    NSString *myDownloadKey = [self downloadKeyWithOriginKey:downloadKey];
    DownloadTaskInfo *taskInfo = [self downloadTaskInfoWithKey:myDownloadKey];
    switch (taskInfo.resourceType) {
        case DownLoadResourceVideoDocumentType:
            [self deleteGroupImageTaskWithKey:myDownloadKey];
            break;
        case DownLoadResourceDocumentType:
        case DownLoadResourceVideoType:
            [self deleteDownloadTaskWithKey:myDownloadKey];
            break;
        case DownLoadResourceExerciseType:
            //暂不清除数据库中的数据
            [self deleteDownloadExerciseTaskWithKey:myDownloadKey];
            break;
        default:
            break;
    }
}

- (void)pauseAllDownloadTask_User {
    
    NSArray *userDownloadingList = [self downloadingTaskList_User];
    for (DownloadTaskInfo *taskInfo in userDownloadingList) {
        [self pauseDownloadTaskWithKey_User:taskInfo.downloadKey];
    }
}

- (void)resumeAllDownloadTask_User {
    
    NSArray *userDownloadingList = [self downloadingTaskList_User];
    for (DownloadTaskInfo *taskInfo in userDownloadingList) {
        [self resumeDownloadTaskWithKey_User:taskInfo.downloadKey];
    }
}

- (DownloadTaskInfo *)downloadTaskInfoWithKey_User:(NSString *)downloadKey {
    
    return [self downloadTaskInfoWithKey:[self downloadKeyWithOriginKey:downloadKey]];
}

- (void)getDownloadedDocumentWithCondition:(DownloadCondition *)condition
                                    sucess:(void(^)(NSArray *loacPaths))sucess
                                   failure:(void(^)())failure {
    
    if (condition.downloadType == DownLoadResourceImageType) {
        [self getGroupImageWithCondition:condition sucess:sucess failure:failure];
    }else { //文档下载
        NSString *localPath = [self filelocalPathWithKey_User:condition.downloadKey];
        if (localPath) {
            if (sucess) {
                sucess(@[localPath]);
            }
            self.sucessDocumentBlock = nil;
            self.failureDocumentBlock = nil;
            self.lastDownloadDocumentKey = nil;
        }else {
            condition.downloadKey = [self downloadKeyWithOriginKey:condition.downloadKey];
            if (sucess) {
                self.sucessDocumentBlock = sucess;
                self.failureDocumentBlock = failure;
                self.lastDownloadDocumentKey = condition.downloadKey;
            }
            //马上进入下载，其它正在下载的任务进入等待状态
            [self addDocumentDownloadTaskImmediate:condition];
        }
    }
}


- (NSString *)filelocalPathWithKey_User:(NSString *)downloadKey {
    
    NSString *myDownloadKey = [self downloadKeyWithOriginKey:downloadKey];
    for (DownloadTaskInfo *taskInfo in self.finishList) {
        if ([taskInfo.downloadKey isEqualToString:myDownloadKey]) {
            return taskInfo.localPath;
        }
    }
    return nil;
}

- (NSString *)originKeyWithDownloadKey:(NSString *)key {
    
    NSArray *arr= [key componentsSeparatedByString:@"**"];
    if (arr.count != 2) {
        return key;
    }
    NSString *downloadKey = [arr objectAtIndex:0];
    
    return downloadKey;
}

- (NSString *)downloadKeyWithOriginKey:(NSString *)key {
    
    NSArray *arr= [key componentsSeparatedByString:@"**"];
    if (arr.count==2) { //已拼接
        return key;
    }
    NSString *userId = [CommonData sharedInstance].userInfo.uid;
    NSString *downloadKey = [NSString stringWithFormat:@"%@**%@", key ,userId];
    
    return downloadKey;
}

- (NSArray *)downloadingTaskList_User {
    
    NSMutableArray *myDownloadArr = [NSMutableArray array];
    for (DownloadTaskInfo *taskInfo in self.downloadingList) {
        NSString *downloadUserId = [self userIdWithDownloadKey:taskInfo.downloadKey];

        NSString *userId = [CommonData sharedInstance].userInfo.uid;
        if ([userId isEqualToString:downloadUserId]) {
            [myDownloadArr addObject:taskInfo];
        }
    }
    
    return myDownloadArr;
}

- (NSArray *)finishedTaskList_User {
    
    NSMutableArray *myFinishedArr = [NSMutableArray array];
    
    for (DownloadTaskInfo *taskInfo in self.finishList) {
        NSString *downloadUserId = [self userIdWithDownloadKey:taskInfo.downloadKey];

        NSString *userId = [CommonData sharedInstance].userInfo.uid;
        if ([userId isEqualToString:downloadUserId]) {
            [myFinishedArr addObject:taskInfo];
        }
    }
    
    return myFinishedArr;
}


- (long long)downloadTaskSize_User {
    
    NSMutableArray *userDownloadList = [NSMutableArray arrayWithArray:[self downloadingTaskList_User]];
    [userDownloadList addObjectsFromArray:[self finishedTaskList_User]];
    long long downSize = 0;
    for (DownloadTaskInfo *taskInfo in userDownloadList) {
        downSize += taskInfo.downSize;
    }
    return downSize;
}

#pragma mark - Private

//从用户下载key中取出用户ID
- (NSString *)userIdWithDownloadKey:(NSString *)key {
    
    NSArray *arr= [key componentsSeparatedByString:@"**"];
    if (arr.count != 2) {
        return nil;
    }
    return [arr objectAtIndex:1];
}

//马上进入下载状态
- (void)addDocumentDownloadTaskImmediate:(DownloadCondition *)condition {
    
    self.maxDownloadTaskCount = 1;  //优先下载文档资源
    [self addDownloadTaskWithCondition:condition];
}

@end
